{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww26700\viewh15060\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 ALGORITMO DE ORDENAMIENTO QUICK SORT\
	- Se basa en la divisi\'f3n de pariciones de la lista a ordenar, por ello se puede considerar que aplica de \'93divide y vencer\'e1s\'94. El m\'e9todo es, posiblemente, el m\'e1s peque\'f1o de c\'f3digo, m\'e1s r\'e1pido\
, m\'e1s elegante, m\'e1s interesante y eficiente de los algoritmos conocidos de ordenaci\'f3n.\
\
\
\'bfComo funciona este algoritmo?\
	- Sigue la estrategia t\'edpica de los algoritmos recursivos \'93divide y vencer\'e1s\'94. El problema de tama\'f1o n (ordenar una lista de n elementos) se divide en dos subproblemas o tareas, cada una d las cuales se vuelve a dividir en dos tareas, cada vez en menos tama\'f1o. Como cada tarea realiza las mismas acciones, el algoritmo se expresa repulsivamente. El caso base (condicion de parada) es conseguir ua tarea (sublista) de tama\'f1o 1.}